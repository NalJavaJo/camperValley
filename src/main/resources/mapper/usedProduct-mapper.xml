<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.campervalley.usedProduct.model.dao.UsedProductDao">

<!-- 상품 등록 -->
<insert id="productInsert" parameterType="usedProduct">
	insert into 
		used_product
	values(
		seq_used_product_no.nextval,
		#{sellerId},
		#{cateNo},
		#{productTitle},
		#{productContent},
		#{productImg1},
		#{productImg2},
		#{productImg3},
		#{productImg4},
		#{productImg5},
		#{productPrice},
		#{productLocation},
		#{productDeliveryFee},
		0,
		null,
		null,
		default,
		default,
		default
	)
	<selectKey keyProperty="productNo" resultType="_int" order="AFTER">
        select
            seq_used_product_no.currval
        from
            dual
    </selectKey>
</insert>

<!-- 상품 번호 가져오기 -->
<select id="getProductNo" resultType="Integer">
	select last_number
	from user_sequences
	where sequence_name = 'SEQ_USED_PRODUCT_NO'
</select>

<!-- 메인페이지 - 상품 목록 가져오기 -->
<select id="getProductList" parameterType="java.util.HashMap" resultType="UsedProduct">
select *
	from (
		select
			rownum rnum,
			p.*
		from (
			select
				product_no,
				seller_id,
				cate_no,
				product_title,
				product_content,
				product_img1,
				product_img2,
				product_img3,
				product_img4,
				product_img5,
				to_char(product_price, 'FM99,999,999') ||'원' as product_price,
				product_location,
				product_delivery_fee,
				round((sysdate-product_enroll_time)*24*60) as product_enroll_time,
				product_views,
				transaction_date,
				buyer_id,
				is_delete,
				heart
			from
				used_product
            where
                is_delete='N' and transaction_date is null 
			order by product_enroll_time asc		
		) p
	)
	where rnum between nvl(#{start}, 0) and nvl(#{end}, 10) order by product_enroll_time asc
</select>

<!-- 카테고리 -->
<select id="cateName" resultType="String">
	select cate_name from category where cate_no=#{cate_no}
</select>

<select id="cateProductList" parameterType="java.util.HashMap" resultType="UsedProduct">
	select *
	from (
		select 
			rownum rnum,
			a.*
		from (
			select
				p.product_no,
				p.seller_id,
				p.cate_no,
				p.product_title,
				p.product_content,
				p.product_img1,
				p.product_img2,
				p.product_img3,
				p.product_img4,
				p.product_img5,
				to_char(product_price, 'FM99,999,999') ||'원' as product_price,
				p.product_location,
				p.product_delivery_fee,
				round((sysdate-product_enroll_time)*24*60) as product_enroll_time,
				p.product_views,
				p.transaction_date,
				p.buyer_id,
				p.is_delete,
				p.heart,
				m.member_id
			from
				used_product p, member m
			where p.seller_id = m.member_id and cate_no=#{cateNo}
			order by
			<choose>
				<when test='order =="A"'>p.product_enroll_time desc</when>
				<when test='order =="B"'>to_number(p.product_views) desc</when>
				<when test='order =="C"'>to_number(p.product_price) asc</when>
				<when test='order =="D"'>to_number(p.product_price) desc</when>
				<otherwise>
					p.product_enroll_time desc
				</otherwise>
			</choose>
			
		) a		
	)
	where rnum between nvl(#{start},1) and nvl(#{end},20)
</select>

<select id="cateProductCount" parameterType="java.util.HashMap" resultType="int">
	select count(0)
	from used_product p, member m
	where p.seller_id = m.member_id and p.cate_no=#{cateNo}
</select>

<select id="cateList" resultType="ProductCategory">
	select 
		cate_no,
		cate_name
	from category 
</select>

<!-- 검색 -->
<select id="searchProductList" parameterType="java.util.HashMap" resultType="UsedProduct">
	select *
	from (
		select 
			rownum rnum,
			a.*
		from (
			select
				product_no,
				seller_id,
				cate_no,
				product_title,
				product_content,
				product_img1,
				product_img2,
				product_img3,
				product_img4,
				product_img5,
				to_char(product_price, 'FM99,999,999') ||'원' as product_price,
				product_location,
				product_delivery_fee,
				round((sysdate-product_enroll_time)*24*60) as product_enroll_time,
				product_views,
				transaction_date,
				buyer_id,
				is_delete,
				heart
			from
				used_product
			where 
				<if test=" productTitle != null and productTitle != '' ">
				product_title Like '%' || #{productTitle} || '%'
				</if>
			order by
			<choose>
				<when test='order =="A"'>product_enroll_time desc</when>
				<when test='order =="B"'>to_number(product_views) desc</when>
				<when test='order =="C"'>to_number(product_price) asc</when>
				<when test='order =="D"'>to_number(product_price) desc</when>
				<otherwise>
					product_enroll_time desc
				</otherwise>
			</choose>
		) a		
	)
	where rnum between nvl(#{start},1) and nvl(#{end},20)
</select>

<select id="searchProductCount" parameterType="java.util.HashMap" resultType="int">
	select count(0)
	from used_product p
	where 
		<if test=" productTitle != null and productTitle != '' ">
		p.product_title Like '%' || #{productTitle} || '%'
		</if>
</select>
<!-- 조회수 증가 -->
<update id="viewUpdate" parameterType="String">
	update used_product
	set product_views = product_views + 1
	where product_no=#{no}
</update>

<select id="productDetail" parameterType="String" resultType="UsedProduct">
	select
		product_no,
		seller_id,
		cate_no,
		product_title,
		product_content,
		product_img1,
		product_img2,
		product_img3,
		product_img4,
		product_img5,
		to_char(product_price, 'FM99,999,999') ||'원' as product_price,
		product_location,
		product_delivery_fee,
		round((sysdate-product_enroll_time)*24*60) as product_enroll_time,
		product_views,
		transaction_date,
		buyer_id,
		is_delete,
		heart
	from used_product where product_no=#{no}	
</select>

<!-- 찜 -->
<!-- 관심상품 추가 -->
<insert id="insertHeart" parameterType="WishProduct">
	insert into wish_product
	values(seq_wish_product_no.nextval, #{memberId}, #{productNo})
</insert>

<update id="updateUpHeart" parameterType="UsedProduct">
	update used_product set heart=heart+1
	where product_no=#{productNo}
</update>

<!-- 하트 갯수 -->
<select id="getHeartCount" parameterType="UsedProduct" resultType="UsedProduct">
	select heart
	from used_product
	where product_no=#{productNo}
</select>

<!-- 관심상품 삭제 -->
<delete id="deleteHeart" parameterType="WishProduct">
	delete from wish_product
	where product_no=#{productNo} and member_id=#{memberId}
</delete>

<update id="updateDownHeart" parameterType="UsedProduct">
	update used_product set heart=heart-1
	where product_no=#{productNo}
</update>

<select id="findHeart" parameterType="java.util.HashMap" resultType="WishProduct">
	select *
	from wish_product
	where product_no=#{productNo} and member_id=#{memberId}
</select>

<!-- 게시글 삭제 -->
<delete id="productDelete" parameterType="int">
	delete from
		used_product
	where
		product_no = #{productNo}
</delete>

</mapper>